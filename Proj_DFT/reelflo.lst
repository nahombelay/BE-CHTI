


ARM Macro Assembler    Page 1 


    1 00000000                 thumb
    2 00000000                 AREA             Reel, code, READONLY
    3 00000000         
    4 00000000                 export           reel
    5 00000000         ;extern TabSig
    6 00000000         
    7 00000000         reel    proc
    8 00000000         ;TabSig dans r0 ;valeur de k dans r1 ;adresse de TabCos 
                       dans r2 ;(mettre dans la pile ?)
    9 00000000         ;on verifie si i * k (dans r3 est inférieur à 64) ; il m
                       e faut un registre pour mettre i * k
   10 00000000 46F0            mov              r8, lr      ;sinon ca bloque à 
                                                            la fin et je ne peu
                                                            x pas retourner au 
                                                            main
   11 00000002 F84D 8D04       push             {r8}
   12 00000006 B500            push             {lr}
   13 00000008 B410            push             {r4}        ;pour le resultat
   14 0000000A         ;b for
   15 0000000A         ;boucle for
   16 0000000A F04F 0300       mov              r3, #0      ;i ; initialisation
                                                             (c'est le premier 
                                                            tour de la boucle)
   17 0000000E B480            push             {r7}
   18 00000010 FB01 F703       mul              r7, r1, r3  ;r1 contient i * k 
                                                            normalement 0 à la 
                                                            premiere itération
   19 00000014 F04F 0400       mov              r4, #0      ;res
   20 00000018 F000 F815       bl               ope
   21 0000001C         ;on incremente i
   22 0000001C F103 0301 
                       for     add              r3,#1
   23 00000020         ;on verifie si i < 64
   24 00000020 2B3F            cmp              r3, #63
   25 00000022 DA07            bge              fin
   26 00000024 FB01 F703       mul              r7, r1, r3  ;r1 contient i * k
   27 00000028 2F40            cmp              r7, #64
   28 0000002A DA19            bge              modulo      ;si i * k >= 64
   29 0000002C         ;donc ici normalement i * k < 64
   30 0000002C B500            push             {lr}
   31 0000002E F000 F80A       bl               ope
   32 00000032 BD00            pop              {PC}
   33 00000034         
   34 00000034 BC80    fin     pop              {r7}
   35 00000036 4620            mov              r0, r4      ;on recupere le res
                                                             final
   36 00000038 BC10            pop              {r4}
   37 0000003A F85D EB04       pop              {lr}
   38 0000003E F85D 8B04       pop              {r8}
   39 00000042 46C6            mov              lr, r8
   40 00000044 4770            bx               lr          ;on retourne au mai
                                                            n
   41 00000046         
   42 00000046         
   43 00000046         ope
   44 00000046 B420            push             {r5}
   45 00000048         ;ldrsh r5, [r2, r1, lsl #1] ;valeur de cos
   46 00000048 F932 5017       ldrsh            r5, [r2, r7, lsl #1]
   47 0000004C B440            push             {r6}



ARM Macro Assembler    Page 2 


   48 0000004E F9B0 6000       ldrsh            r6, [r0]    ;valeur du sig
   49 00000052 FB00 F605       mul              r6, r0, r5
   50 00000056 4434            add              r4, r6
   51 00000058 BC40            pop              {r6}
   52 0000005A BC20            pop              {r5}
   53 0000005C F7FF FFDE       bl               for
   54 00000060         
   55 00000060 F1A7 0740 
                       modulo  sub              r7,#64
   56 00000064 2F40            cmp              r7,#64
   57 00000066 DAFB            bge              modulo      ;si supérieur on re
                                                            commence
   58 00000068 F7FF FFED       bl               ope         ;si inférieur c'est
                                                             bon on passe à l'o
                                                            peration
   59 0000006C         
   60 0000006C         
   61 0000006C         
   62 0000006C                 endp
   63 0000006C                 end
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\obj\reelflo.d -o.\obj\reelflo.o -I.\RTE\_Simu -I"C:\Users\Nahom 
Belay\AppData\Local\Arm\Packs\ARM\CMSIS\5.6.0\CMSIS\Core\Include" -I"C:\Users\N
ahom Belay\AppData\Local\Arm\Packs\Keil\STM32F1xx_DFP\2.3.0\Device\Include" --p
redefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 1" --predefine="__UVISION
_VERSION SETA 529" --predefine="_RTE_ SETA 1" --predefine="STM32F10X_MD SETA 1"
 --list=reelflo.lst reelFlo.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Reel 00000000

Symbol: Reel
   Definitions
      At line 2 in file reelFlo.s
   Uses
      None
Comment: Reel unused
fin 00000034

Symbol: fin
   Definitions
      At line 34 in file reelFlo.s
   Uses
      At line 25 in file reelFlo.s
Comment: fin used once
for 0000001C

Symbol: for
   Definitions
      At line 22 in file reelFlo.s
   Uses
      At line 53 in file reelFlo.s
Comment: for used once
modulo 00000060

Symbol: modulo
   Definitions
      At line 55 in file reelFlo.s
   Uses
      At line 28 in file reelFlo.s
      At line 57 in file reelFlo.s

ope 00000046

Symbol: ope
   Definitions
      At line 43 in file reelFlo.s
   Uses
      At line 20 in file reelFlo.s
      At line 31 in file reelFlo.s
      At line 58 in file reelFlo.s

reel 00000000

Symbol: reel
   Definitions
      At line 7 in file reelFlo.s
   Uses
      At line 4 in file reelFlo.s
Comment: reel used once
6 symbols
341 symbols in table
